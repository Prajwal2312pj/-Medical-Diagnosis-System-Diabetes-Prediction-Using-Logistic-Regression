# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hDanQ9lY9oyUQ5Y8lGr2wJFBUo0kgqHY
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("uciml/pima-indians-diabetes-database")

print("Path to dataset files:", path)

#loading dataset
import pandas as pd
import numpy as np
import os
df=pd.read_csv(os.path.join(path,'diabetes.csv'))
df.head()

#check missing and invalid data
df=pd.read_csv(os.path.join(path,'diabetes.csv'))
print(df)

#check info
print(df.info())

#check zeros in features where zero is not valid
zero_columns= ['Glucose','BloodPressure','SkinThickness','Insulin','BMI']
for col in zero_columns:
  print(f'{col} has {(df[col] == 0).sum()} zeros')

"""Replace Zeros with NaN and Handle Missing"""

#replace zeros with NaN
import numpy as np
df[zero_columns] = df[zero_columns].replace(0, np.nan)

#Fill missing with median
df.fillna(df.median(), inplace=True)
print(df)
print(df.isnull().sum())

"""TRAIN_TEST_SPLIT"""

#train_test_split
X=df.drop('Outcome',axis=1)
y=df['Outcome']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
print(X_test.shape)
print(X_train.shape)
print(y_test.shape)
print(y_train.shape)

"""FEATURE SCALING"""

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
X_train=scaler.fit_transform(X_train)
X_test=scaler.fit_transform(X_test)
print(X_train)

"""TRAIN LOGISTIC REGRESSION MODEL"""

from sklearn.linear_model import LogisticRegression
model=LogisticRegression(max_iter=1000)
model.fit(X_train,y_train)

"""MAKE PREDICTIONS & EVALUATE"""

y_pred=model.predict(X_test)
print(y_pred)

print("Classification Report:\n")

from sklearn.metrics import classification_report, accuracy_score
print(classification_report(y_test,y_pred))
accuracy=accuracy_score(y_test,y_pred)
print(f"Accuracy of the model:{accuracy:.2f}")

"""CONFUSION MATRIX"""

from sklearn.metrics import confusion_matrix,roc_auc_score,roc_curve
import seaborn as sns
import matplotlib.pyplot as plt
print(confusion_matrix(y_test,y_pred))

cm= confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True,fmt='d',cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()

"""ROC-AUC CURVE"""

y_prob=model.predict_proba(X_test)[:,1]
fpr,tpr,_=roc_curve(y_test,y_prob)
plt.plot(fpr,tpr, label=f'AUC={roc_auc_score(y_test,y_prob):.2f}')
plt.plot([0,1],[0,1],'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend()
plt.show()

"""SAVE MODEL"""

import joblib
joblib.dump(model,'diabetes_model.pkl')
joblib.dump(scaler,'scaler.pkl')